"""Frist LMS db

Revision ID: c6e441bcb96e
Revises: 28a0d2f371c7
Create Date: 2024-10-14 20:38:46.217593

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "c6e441bcb96e"
down_revision: Union[str, None] = "28a0d2f371c7"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "block_types",
        sa.Column("block_type_id", sa.Integer(), nullable=False),
        sa.Column("block_type", sa.String(length=10), nullable=False),
        sa.PrimaryKeyConstraint("block_type_id"),
        sa.UniqueConstraint("block_type"),
    )
    op.create_table(
        "roles",
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=10), nullable=False),
        sa.Column("description", sa.String(length=200), nullable=True),
        sa.PrimaryKeyConstraint("role_id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "users",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("first_name", sa.String(length=30), nullable=False),
        sa.Column("second_name", sa.String(length=30), nullable=False),
        sa.Column("login", sa.String(length=20), nullable=False),
        sa.Column("email", sa.String(length=60), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("photo", sa.String(), nullable=True),
        sa.Column("about", sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint("user_id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("login"),
    )
    op.create_index(
        op.f("ix_users_user_id"), "users", ["user_id"], unique=False
    )
    op.create_table(
        "course",
        sa.Column("course_id", sa.Integer(), nullable=False),
        sa.Column("author_id", sa.Integer(), nullable=False),
        sa.Column("title", sa.String(length=200), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["author_id"],
            ["users.user_id"],
        ),
        sa.PrimaryKeyConstraint("course_id"),
    )
    op.create_table(
        "sessions",
        sa.Column("session_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("session_token", sa.String(length=255), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("expires_at", sa.DateTime(), nullable=False),
        sa.Column("last_active_at", sa.DateTime(), nullable=False),
        sa.Column("ip_address", sa.String(length=45), nullable=True),
        sa.Column("user_agent", sa.String(length=255), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.user_id"],
        ),
        sa.PrimaryKeyConstraint("session_id"),
        sa.UniqueConstraint("session_token"),
        sa.UniqueConstraint("session_token", name="unique_session_token"),
    )
    op.create_index("ix_user_id", "sessions", ["user_id"], unique=False)
    op.create_table(
        "users_roles",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["roles.role_id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.user_id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "role_id"),
    )
    op.create_table(
        "groups",
        sa.Column("group_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("supervisor_id", sa.Integer(), nullable=False),
        sa.Column("course_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["course_id"],
            ["course.course_id"],
        ),
        sa.ForeignKeyConstraint(
            ["supervisor_id"],
            ["users.user_id"],
        ),
        sa.PrimaryKeyConstraint("group_id"),
    )
    op.create_table(
        "topics",
        sa.Column("topic_id", sa.Integer(), nullable=False),
        sa.Column("course_id", sa.Integer(), nullable=True),
        sa.Column("title", sa.String(length=200), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["course_id"],
            ["course.course_id"],
        ),
        sa.PrimaryKeyConstraint("topic_id"),
    )
    op.create_table(
        "users_courses",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("course_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["course_id"],
            ["course.course_id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.user_id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "course_id"),
    )
    op.create_table(
        "blocks",
        sa.Column("block_id", sa.Integer(), nullable=False),
        sa.Column("topic_id", sa.Integer(), nullable=True),
        sa.Column("block_type_id", sa.Integer(), nullable=False),
        sa.Column("title", sa.String(length=200), nullable=False),
        sa.Column("text", sa.Text(), nullable=True),
        sa.Column("sequence", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["block_type_id"],
            ["block_types.block_type_id"],
        ),
        sa.ForeignKeyConstraint(
            ["topic_id"],
            ["topics.topic_id"],
        ),
        sa.PrimaryKeyConstraint("block_id"),
        sa.UniqueConstraint(
            "block_id", "block_type_id", name="unique_block_type"
        ),
        sa.UniqueConstraint(
            "topic_id", "sequence", name="unique_topic_sequence"
        ),
    )
    op.create_table(
        "lessons",
        sa.Column("lesson_id", sa.Integer(), nullable=False),
        sa.Column("group_id", sa.Integer(), nullable=False),
        sa.Column("start", sa.DateTime(), nullable=True),
        sa.Column("comment", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["groups.group_id"],
        ),
        sa.PrimaryKeyConstraint("lesson_id"),
    )
    op.create_table(
        "attempts",
        sa.Column("attempt_id", sa.Integer(), nullable=False),
        sa.Column("block_id", sa.Integer(), nullable=True),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("attempted_at", sa.DateTime(), nullable=False),
        sa.Column("input", sa.Text(), nullable=True),
        sa.Column("output", sa.Text(), nullable=True),
        sa.Column("success", sa.Boolean(), nullable=True),
        sa.Column("comment", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["block_id"],
            ["blocks.block_id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.user_id"],
        ),
        sa.PrimaryKeyConstraint("attempt_id"),
    )
    op.create_table(
        "attendences",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("lesson_id", sa.Integer(), nullable=False),
        sa.Column("presence", sa.Boolean(), nullable=False),
        sa.Column("comment", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["lesson_id"],
            ["lessons.lesson_id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.user_id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "lesson_id"),
    )
    op.drop_table("enrollment_table")
    op.drop_index("ix_role_table_id", table_name="role_table")
    op.drop_constraint("user_table_role_id_fkey", "user_table")
    op.drop_table("role_table")
    op.drop_table("course_table")
    op.drop_table("user_table")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "role_table",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('role_table_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "name", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
        sa.Column(
            "description", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.PrimaryKeyConstraint("id", name="role_table_pkey"),
        sa.UniqueConstraint("name", name="role_table_name_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_role_table_id", "role_table", ["id"], unique=False)
    
    op.create_table(
        "user_table",
        sa.Column(
            "nickname",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "email", sa.VARCHAR(length=100), autoincrement=False, nullable=True
        ),
        sa.Column(
            "password",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "role_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('user_table_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["role_id"], ["role_table.id"], name="user_table_role_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="user_table_pkey"),
        sa.UniqueConstraint("email", name="user_table_email_key"),
        sa.UniqueConstraint("nickname", name="user_table_nickname_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "course_table",
        sa.Column(
            "title",
            sa.VARCHAR(length=100),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "description", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('course_table_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="course_table_pkey"),
        postgresql_ignore_search_path=False,
    )
    
    op.create_table(
        "enrollment_table",
        sa.Column(
            "user_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "course_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "enrollment_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["course_id"],
            ["course_table.id"],
            name="enrollment_table_course_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user_table.id"],
            name="enrollment_table_user_id_fkey",
        ),
        sa.PrimaryKeyConstraint(
            "user_id", "course_id", "id", name="enrollment_table_pkey"
        ),
    )
    op.drop_table("attendences")
    op.drop_table("attempts")
    op.drop_table("lessons")
    op.drop_table("blocks")
    op.drop_table("users_courses")
    op.drop_table("topics")
    op.drop_table("groups")
    op.drop_table("users_roles")
    op.drop_index("ix_user_id", table_name="sessions")
    op.drop_table("sessions")
    op.drop_table("course")
    op.drop_index(op.f("ix_users_user_id"), table_name="users")
    op.drop_table("users")
    op.drop_table("roles")
    op.drop_table("block_types")
    # ### end Alembic commands ###
